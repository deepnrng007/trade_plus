// Mocks generated by Mockito 5.4.4 from annotations
// in trade_plus/test/real_time_stock_app_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:trade_plus/models/Symbol.dart' as _i5;
import 'package:trade_plus/services.dart/price_ticker_socket_service.dart'
    as _i3;
import 'package:trade_plus/services.dart/stocks_service.dart' as _i6;
import 'package:web_socket_channel/web_socket_channel.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWebSocketChannel_0 extends _i1.SmartFake
    implements _i2.WebSocketChannel {
  _FakeWebSocketChannel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WebSocketService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebSocketService extends _i1.Mock implements _i3.WebSocketService {
  MockWebSocketService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WebSocketChannel get channel => (super.noSuchMethod(
        Invocation.getter(#channel),
        returnValue: _FakeWebSocketChannel_0(
          this,
          Invocation.getter(#channel),
        ),
      ) as _i2.WebSocketChannel);

  @override
  set channel(_i2.WebSocketChannel? _channel) => super.noSuchMethod(
        Invocation.setter(
          #channel,
          _channel,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> get priceMap => (super.noSuchMethod(
        Invocation.getter(#priceMap),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i4.Stream<dynamic> get priceStream => (super.noSuchMethod(
        Invocation.getter(#priceStream),
        returnValue: _i4.Stream<dynamic>.empty(),
      ) as _i4.Stream<dynamic>);

  @override
  void connectToWebSocket() => super.noSuchMethod(
        Invocation.method(
          #connectToWebSocket,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  double? getPrice(String? symbol) => (super.noSuchMethod(Invocation.method(
        #getPrice,
        [symbol],
      )) as double?);

  @override
  bool isSubscribed(String? symbol) => (super.noSuchMethod(
        Invocation.method(
          #isSubscribed,
          [symbol],
        ),
        returnValue: false,
      ) as bool);

  @override
  void unsubscribeFromSymbol(String? symbol) => super.noSuchMethod(
        Invocation.method(
          #unsubscribeFromSymbol,
          [symbol],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void subscribeToSymbols(List<_i5.StockSymbol>? symbols) => super.noSuchMethod(
        Invocation.method(
          #subscribeToSymbols,
          [symbols],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void subscribeToSymbol(String? symbol) => super.noSuchMethod(
        Invocation.method(
          #subscribeToSymbol,
          [symbol],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [StockApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStockApiService extends _i1.Mock implements _i6.StockApiService {
  MockStockApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get apiKey => (super.noSuchMethod(
        Invocation.getter(#apiKey),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#apiKey),
        ),
      ) as String);

  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
      ) as String);

  @override
  _i4.Future<List<_i5.StockSymbol>> fetchSymbols({
    int? limit = 50,
    int? offset = 0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchSymbols,
          [],
          {
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue:
            _i4.Future<List<_i5.StockSymbol>>.value(<_i5.StockSymbol>[]),
      ) as _i4.Future<List<_i5.StockSymbol>>);
}
